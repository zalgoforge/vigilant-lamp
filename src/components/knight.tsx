/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { FC, useCallback, useEffect, useRef } from "react";
import { useGLTF, useAnimations, OrbitControls } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { useFrame } from "@react-three/fiber";
import { useKeyState } from "use-key-state";

type ActionName =
  | "Idle"
  | "SwordAndShield180Turn"
  | "SwordAndShieldBlock"
  | "SwordAndShieldBlocking"
  | "SwordAndShieldCrouchBlockIdle"
  | "SwordAndShieldCrouchIdle"
  | "SwordAndShieldDeath_2"
  | "SwordAndShieldDeath"
  | "SwordAndShieldIdle"
  | "SwordAndShieldImpact"
  | "SwordAndShieldJump"
  | "SwordAndShieldKick"
  | "SwordAndShieldRun(back)"
  | "SwordAndShieldRun"
  | "SwordAndShieldSlash_2"
  | "SwordAndShieldSlash"
  | "T-Pose";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    chest: THREE.SkinnedMesh;
    helmet: THREE.SkinnedMesh;
    shoulder_pads: THREE.SkinnedMesh;
    thigh_plate: THREE.SkinnedMesh;
    arm_strap_bottom: THREE.SkinnedMesh;
    arm_strap_top: THREE.SkinnedMesh;
    cylt_sides: THREE.SkinnedMesh;
    belt: THREE.SkinnedMesh;
    cross: THREE.SkinnedMesh;
    cylt: THREE.SkinnedMesh;
    shield_1: THREE.SkinnedMesh;
    tail: THREE.SkinnedMesh;
    head_merged: THREE.SkinnedMesh;
    eyes_Sphere: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
    shield: THREE.Bone;
    sword: THREE.Bone;
  };
  materials: {
    Metal: THREE.MeshStandardMaterial;
    Armor_2: THREE.MeshStandardMaterial;
    ["Armor_2.001"]: THREE.MeshStandardMaterial;
    ["body.001"]: THREE.MeshStandardMaterial;
    body: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

const RESOURCE_URL = "glb/source/Footman_RIG.glb";
const MOVE_SPEED = 0.05;

export const Knight: FC = (props: JSX.IntrinsicElements["group"]) => {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF(
    RESOURCE_URL
  ) as unknown as GLTFResult;

  const { actions } = useAnimations(animations, group);
  const query = useKeyState().keyStateQuery;

  const onKeyDown = useCallback(
    (e: KeyboardEvent) => {
      if (e.key === "w") {
        actions.SwordAndShieldRun?.play();
      }
      if (e.key === "s") {
        actions["SwordAndShieldRun(back)"]?.play();
      }
      if (e.key === "a") {
        actions.SwordAndShieldRun?.play();
      }
      if (e.key === "d") {
        actions.SwordAndShieldRun?.play();
      }
    },
    [actions]
  );

  const onKeyUp = useCallback(
    (e: KeyboardEvent) => {
      if (e.key === "w") {
        actions.SwordAndShieldRun?.stop();
      } else if (e.key === "s") {
        actions["SwordAndShieldRun(back)"]?.stop();
      } else if (e.key === "a") {
        actions.SwordAndShieldRun?.stop();
      } else if (e.key === "d") {
        actions.SwordAndShieldRun?.stop();
      }
    },
    [actions]
  );

  React.useEffect(() => {
    window.addEventListener("keydown", onKeyDown);
    window.addEventListener("keyup", onKeyUp);
    return () => {
      window.removeEventListener("keydown", onKeyDown);
      window.removeEventListener("keyup", onKeyUp);
    };
  }, []);

  useFrame(() => {
    if (!group.current) return;
    if (query.pressed("KeyW")) {
      group.current.position.z -= MOVE_SPEED;
    }
    if (query.pressed("KeyA")) {
      group.current.position.x -= MOVE_SPEED;
    }
    if (query.pressed("KeyS")) {
      group.current.position.z += MOVE_SPEED;
    }
    if (query.pressed("KeyD")) {
      group.current.position.x += MOVE_SPEED;
    }
  });

  useEffect(() => {
    if (!actions.Idle) return;
    actions.Idle.play();
  }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[0, 0, 0.04]} userData={{ name: "Footman_rig" }}>
        <primitive object={nodes.mixamorigHips} />
        <primitive object={nodes.shield} />
        <primitive object={nodes.sword} />
        <skinnedMesh
          castShadow={true}
          geometry={nodes.chest.geometry}
          material={nodes.chest.material}
          skeleton={nodes.chest.skeleton}
          userData={{ name: "chest" }}
        />
        <skinnedMesh
          castShadow={true}
          geometry={nodes.helmet.geometry}
          material={nodes.helmet.material}
          skeleton={nodes.helmet.skeleton}
          userData={{ name: "helmet" }}
        />
        <skinnedMesh
          castShadow={true}
          geometry={nodes.shoulder_pads.geometry}
          material={nodes.shoulder_pads.material}
          skeleton={nodes.shoulder_pads.skeleton}
          userData={{ name: "shoulder pads" }}
        />
        <skinnedMesh
          castShadow={true}
          geometry={nodes.thigh_plate.geometry}
          material={nodes.thigh_plate.material}
          skeleton={nodes.thigh_plate.skeleton}
          userData={{ name: "thigh_plate" }}
        />
        <skinnedMesh
          castShadow={true}
          geometry={nodes.arm_strap_bottom.geometry}
          material={nodes.arm_strap_bottom.material}
          skeleton={nodes.arm_strap_bottom.skeleton}
          userData={{ name: "arm_strap_bottom" }}
        />
        <skinnedMesh
          castShadow={true}
          geometry={nodes.arm_strap_top.geometry}
          material={nodes.arm_strap_top.material}
          skeleton={nodes.arm_strap_top.skeleton}
          userData={{ name: "arm_strap_top" }}
        />
        <skinnedMesh
          castShadow={true}
          geometry={nodes.cylt_sides.geometry}
          material={nodes.cylt_sides.material}
          skeleton={nodes.cylt_sides.skeleton}
          userData={{ name: "cylt_sides" }}
        />
        <skinnedMesh
          castShadow={true}
          geometry={nodes.belt.geometry}
          material={nodes.belt.material}
          skeleton={nodes.belt.skeleton}
          userData={{ name: "belt" }}
        />
        <skinnedMesh
          castShadow={true}
          geometry={nodes.cross.geometry}
          material={nodes.cross.material}
          skeleton={nodes.cross.skeleton}
          userData={{ name: "cross" }}
        />
        <skinnedMesh
          castShadow={true}
          geometry={nodes.cylt.geometry}
          material={nodes.cylt.material}
          skeleton={nodes.cylt.skeleton}
          userData={{ name: "cylt" }}
        />
        <skinnedMesh
          castShadow={true}
          geometry={nodes.shield_1.geometry}
          material={nodes.shield_1.material}
          skeleton={nodes.shield_1.skeleton}
          userData={{ name: "shield" }}
        />
        <skinnedMesh
          castShadow={true}
          geometry={nodes.tail.geometry}
          material={nodes.tail.material}
          skeleton={nodes.tail.skeleton}
          userData={{ name: "tail" }}
        />
        <skinnedMesh
          castShadow={true}
          geometry={nodes.head_merged.geometry}
          material={materials["body.001"]}
          skeleton={nodes.head_merged.skeleton}
          userData={{ name: "head_merged" }}
        />
        <skinnedMesh
          castShadow={true}
          geometry={nodes.eyes_Sphere.geometry}
          material={materials.body}
          skeleton={nodes.eyes_Sphere.skeleton}
          userData={{ name: "eyes_Sphere" }}
        />
      </group>
      <OrbitControls />
    </group>
  );
};

useGLTF.preload(RESOURCE_URL);
